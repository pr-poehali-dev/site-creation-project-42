import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

const predefinedResponses: { [key: string]: string } = {
  '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –±–ª–æ–≥–∞. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å!',
  '—á—Ç–æ —Ç–∞–∫–æ–µ –∏–∏': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: –ø–æ–Ω–∏–º–∞–Ω–∏–µ —è–∑—ã–∫–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ò–ò –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ–≥—Ä–æ–º–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö –¥–∞–Ω–Ω—ã—Ö.',
  'gpt': 'GPT (Generative Pre-trained Transformer) ‚Äî —ç—Ç–æ —Å–µ–º–µ–π—Å—Ç–≤–æ –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –æ—Ç OpenAI. GPT-4 ‚Äî —Å–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å ~1.7 —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–ø–æ—Å–æ–±–Ω–∞—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ–¥, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞.',
  'claude': 'Claude ‚Äî —ç—Ç–æ —Å–µ–º–µ–π—Å—Ç–≤–æ –ò–ò-–º–æ–¥–µ–ª–µ–π –æ—Ç Anthropic, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å. Claude 3.5 Sonnet –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ 200K —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –Ω—é–∞–Ω—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ (92% –Ω–∞ HumanEval).',
  '–∏—Å—Ç–æ—Ä–∏—è': '–ò—Å—Ç–æ—Ä–∏—è –ò–ò –Ω–∞—á–∞–ª–∞—Å—å –≤ 1950-—Ö —Å —Ç–µ—Å—Ç–∞ –¢—å—é—Ä–∏–Ω–≥–∞. –ö–ª—é—á–µ–≤—ã–µ –≤–µ—Ö–∏: 1956 ‚Äî —Ç–µ—Ä–º–∏–Ω "–ò–ò", 1997 ‚Äî Deep Blue –ø–æ–±–µ–∂–¥–∞–µ—Ç –ö–∞—Å–ø–∞—Ä–æ–≤–∞, 2012 ‚Äî —Ä–µ–≤–æ–ª—é—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, 2017 ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Transformer, 2022 ‚Äî ChatGPT —Å–æ–±—Ä–∞–ª 100M –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 2 –º–µ—Å—è—Ü–∞.',
  '–±—É–¥—É—â–µ–µ': '–ë—É–¥—É—â–µ–µ –ò–ò: AGI (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç) –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫ 2027-2035 –≥–æ–¥–∞–º, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∫–≤–∞–Ω—Ç–æ–≤—ã–π –ò–ò —Ä–µ—à–∏—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–∑–≥-–∫–æ–º–ø—å—é—Ç–µ—Ä –æ–±—ä–µ–¥–∏–Ω—è—Ç –ª—é–¥–µ–π –∏ –ò–ò. –ù–æ –µ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏: –ø–æ—Ç–µ—Ä—è —Ä–∞–±–æ—Ç, –¥–∏–ø—Ñ–µ–π–∫–∏, —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.',
  '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ': '–ò–ò –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤–µ–∑–¥–µ: üíº –ë–∏–∑–Ω–µ—Å (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö), üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Copilot, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ), üé® –ö—Ä–µ–∞—Ç–∏–≤ (Midjourney, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π), üè• –ú–µ–¥–∏—Ü–∏–Ω–∞ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤), üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã), üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–∞–≤—Ç–æ–ø–∏–ª–æ—Ç).',
  '–∫–∞–∫ –Ω–∞—á–∞—Ç—å': '–ù–∞—á–Ω–∏ —Å ChatGPT (chat.openai.com) –∏–ª–∏ Claude (claude.ai) ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º. –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ ‚Äî GitHub Copilot. –î–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞ ‚Äî Midjourney. –ò–∑—É—á–∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!',
  '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏': '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞: –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–≤—è–∑—è–º–∏ —Å –≤–µ—Å–∞–º–∏. –û–±—É—á–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—è –≤–µ—Å–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫. –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Å—è—Ç–∫–∏-—Å–æ—Ç–Ω–∏ —Å–ª–æ—ë–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.',
  'transformer': 'Transformer ‚Äî —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–Ω–∏–º–∞–Ω–∏—è (attention), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è Google –≤ 2017. –ú–æ–¥–µ–ª—å "–æ–±—Ä–∞—â–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ" –Ω–∞ –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ. –û—Å–Ω–æ–≤–∞ –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö LLM: GPT, BERT, Claude, Gemini.',
  '—Ä–∏—Å–∫–∏': '–†–∏—Å–∫–∏ –ò–ò: üî¥ –ü–æ—Ç–µ—Ä—è —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç (40-60% –∑–∞–¥–∞—á –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç—Å—è), üî¥ –î–∏–ø—Ñ–µ–π–∫–∏ –∏ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, üî¥ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, üî¥ –≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –ò–ò, üî¥ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–ª–∞—Å—Ç–∏ —É –∫–æ–º–ø–∞–Ω–∏–π-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –í–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ò–ò –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.',
  'alphago': 'AlphaGo ‚Äî —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç DeepMind, –∫–æ—Ç–æ—Ä–∞—è –≤ 2016 –ø–æ–±–µ–¥–∏–ª–∞ —á–µ–º–ø–∏–æ–Ω–∞ –º–∏—Ä–∞ –õ–∏ –°–µ–¥–æ–ª—è –≤ –≥–æ (–∏–≥—Ä–∞ —Å–ª–æ–∂–Ω–µ–µ —à–∞—Ö–º–∞—Ç). –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ reinforcement learning –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü—Ä–æ—Ä—ã–≤ –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ –ò–ò –º–æ–∂–µ—Ç –ø—Ä–µ–≤–∑–æ–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ª–æ–∂–Ω–µ–π—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö.',
  '–ø–æ–º–æ—â—å': '–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –ò–ò! –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å: "—á—Ç–æ —Ç–∞–∫–æ–µ –∏–∏", "gpt", "claude", "–∏—Å—Ç–æ—Ä–∏—è", "–±—É–¥—É—â–µ–µ", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "–∫–∞–∫ –Ω–∞—á–∞—Ç—å", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "transformer", "—Ä–∏—Å–∫–∏", "alphago". –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!',
};

const quickQuestions = [
  '–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?',
  '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ GPT',
  '–ò—Å—Ç–æ—Ä–∏—è –ò–ò',
  '–ö–∞–∫ –Ω–∞—á–∞—Ç—å?',
  '–ë—É–¥—É—â–µ–µ –ò–ò',
  '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò'
];

const AIChatbot = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —ç—Ç–æ–≥–æ –±–ª–æ–≥–∞. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É!',
      timestamp: new Date()
    }
  ]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const findResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    for (const [key, response] of Object.entries(predefinedResponses)) {
      if (lowerMessage.includes(key)) {
        return response;
      }
    }
    
    return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ GPT, Claude, –∏—Å—Ç–æ—Ä–∏—é –ò–ò, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–µ–º—ã!';
  };

  const handleSend = async (messageText?: string) => {
    const textToSend = messageText || input;
    if (!textToSend.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: textToSend,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    setTimeout(() => {
      const responseContent = findResponse(textToSend);
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: responseContent,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 800);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleQuickQuestion = (question: string) => {
    handleSend(question);
  };

  return (
    <div className="space-y-4">
      <div className="text-center mb-8">
        <h2 className="text-4xl font-bold gradient-text mb-4">–ò–ò-–ß–∞—Ç –ü–æ–º–æ—â–Ω–∏–∫</h2>
        <p className="text-lg text-muted-foreground">
          –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –ø–æ–ª—É—á–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        </p>
      </div>

      <div className="flex flex-wrap gap-2 justify-center mb-6">
        <span className="text-sm font-medium text-muted-foreground flex items-center">
          –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
        </span>
        {quickQuestions.map((question, index) => (
          <Badge
            key={index}
            variant="outline"
            className="cursor-pointer hover-scale px-3 py-2"
            onClick={() => handleQuickQuestion(question)}
          >
            {question}
          </Badge>
        ))}
      </div>

      <Card className="border-2 border-primary/30 h-[600px] flex flex-col">
        <CardHeader className="border-b bg-gradient-to-r from-primary/5 to-secondary/5">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Bot" size={24} className="text-primary" />
            –ß–∞—Ç —Å –ò–ò
            <Badge className="ml-auto gradient-bg text-white border-0">–û–Ω–ª–∞–π–Ω</Badge>
          </CardTitle>
        </CardHeader>
        
        <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'} animate-fade-in`}
            >
              {message.role === 'assistant' && (
                <div className="w-8 h-8 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center flex-shrink-0">
                  <Icon name="Bot" size={16} className="text-white" />
                </div>
              )}
              
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  message.role === 'user'
                    ? 'bg-gradient-to-br from-primary to-secondary text-white'
                    : 'bg-muted'
                }`}
              >
                <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                <p className={`text-xs mt-1 ${message.role === 'user' ? 'text-white/70' : 'text-muted-foreground'}`}>
                  {message.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                </p>
              </div>

              {message.role === 'user' && (
                <div className="w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0">
                  <Icon name="User" size={16} className="text-white" />
                </div>
              )}
            </div>
          ))}

          {isTyping && (
            <div className="flex gap-3 justify-start animate-fade-in">
              <div className="w-8 h-8 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center flex-shrink-0">
                <Icon name="Bot" size={16} className="text-white" />
              </div>
              <div className="bg-muted rounded-2xl px-4 py-3">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </CardContent>

        <div className="p-4 border-t bg-muted/30">
          <div className="flex gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ–± –ò–ò..."
              className="flex-1"
            />
            <Button
              onClick={() => handleSend()}
              disabled={!input.trim() || isTyping}
              className="gradient-bg text-white border-0 hover:opacity-90"
            >
              <Icon name="Send" size={18} />
            </Button>
          </div>
          <p className="text-xs text-muted-foreground mt-2 text-center">
            üí° –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ GPT, Claude, –∏—Å—Ç–æ—Ä–∏—é –ò–ò –∏–ª–∏ –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
          </p>
        </div>
      </Card>

      <Card className="border-2 border-accent/30 bg-gradient-to-br from-accent/5 to-primary/5">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-lg">
            <Icon name="Info" size={20} className="text-accent" />
            –û —á–∞—Ç-–±–æ—Ç–µ
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 text-sm text-muted-foreground">
          <p>ü§ñ –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ò–ò-—á–∞—Ç–∞ —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏</p>
          <p>üí¨ –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, GPT, Claude, –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö</p>
          <p>‚ö° –û—Ç–≤–µ—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –ò–ò-–º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</p>
          <p>üöÄ –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAI API –∏–ª–∏ Claude API</p>
        </CardContent>
      </Card>
    </div>
  );
};

export default AIChatbot;
